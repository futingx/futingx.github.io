---
layout: post
title:  "C++常用容器"
categories: C++  # 文章类别
tags:  C++ #文章标签
author: FTX #作者
---

* content
{:toc}

##### &emsp;这里我们介绍一下 **C++** 算法竞赛中的STL常用的容器和函数用法：
在这个C++ STL容器运用的部分，我们只简单的介绍常用的语法和运用，每一个容器的结束也都会举与容器有关的题目来实践运用。如有补充不全或者错误，还请多包涵。

### &emsp;一.vector容器

##### &emsp;1.1 介绍：

### &emsp;一.vector容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;二.pair容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;三.queue容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;四.deque容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;五.priority_queue容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;六.set容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;七.map容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;八.string容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;九.stack容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;十.tuple容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 引入头文件：`#include<vector>`
- 不过我个人更喜欢万能头文件`#include<bits/stdc++.h>`,万能头文件有可能会降低程序运行效率，有利有弊但是不需要记这么多容器word

##### &emsp;1.3 实践运用：

- 

<hr/>

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- #include

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;二.pair容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>





### &emsp;三.queue容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;四.deque容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;五.priority_queue容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;六.set容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;七.map容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;八.string容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;九.stack容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

### &emsp;十.tuple容器

##### &emsp;1.1 介绍：

- 动态数组,可以随时删除和增加元素，相比于直接定义数组大小，vector不会发生爆栈。

##### &emsp;1.2 容器包含的函数(介绍常用的一些，其余的可以去百度)：

- 

##### &emsp;1.3 实践运用：

- 

<hr/>

